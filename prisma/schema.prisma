generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String              @id @default(cuid())
  email                 String              @unique
  password              String?
  emailVerified         DateTime?
  ownerName             String?
  ownerImage            String?
  restaurantName        String?
  restaurantDescription String?
  restaurantAddress     String?
  restaurantPhone       String?
  restaurantEmail       String?
  isRestaurantActive    Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  accounts              Account[]
  categories            Category[]
  customerSessions      CustomerSession[]   @relation("UserSessions")
  waitingSessions       CustomerSession[]   @relation("WaiterSessions")
  menuItems             MenuItem[]
  cookingOrders         Order[]             @relation("OrderCook")
  servedOrders          Order[]             @relation("OrderServer")
  orders                Order[]             @relation("UserOrders")
  waitingOrders         Order[]             @relation("OrderWaiter")
  payments              Payment[]
  settings              RestaurantSettings?
  sessions              Session[]
  tables                Table[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Table {
  id         String            @id @default(cuid())
  number     String
  name       String?
  capacity   Int               @default(4)
  isActive   Boolean           @default(true)
  sortOrder  Int               @default(0)
  qrCode     String?
  gridX      Int               @default(0)
  gridY      Int               @default(0)
  gridWidth  Int               @default(2)
  gridHeight Int               @default(2)
  userId     String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  sessions   CustomerSession[]
  orders     Order[]
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, number])
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  menuItems   MenuItem[]

  @@unique([userId, name])
}

model MenuItem {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  image       String?
  isActive    Boolean     @default(true)
  isAvailable Boolean     @default(true)
  sortOrder   Int         @default(0)
  userId      String
  categoryId  String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  selections  Selection[]
}

model Selection {
  id            String            @id @default(cuid())
  name          String
  description   String?
  isRequired    Boolean           @default(false)
  allowMultiple Boolean           @default(false)
  sortOrder     Int               @default(0)
  menuItemId    String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  menuItem      MenuItem          @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  options       SelectionOption[]
}

model SelectionOption {
  id          String    @id @default(cuid())
  name        String
  description String?
  priceAdd    Decimal   @default(0) @db.Decimal(10, 2)
  isAvailable Boolean   @default(true)
  sortOrder   Int       @default(0)
  selectionId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  selection   Selection @relation(fields: [selectionId], references: [id], onDelete: Cascade)
}

model CustomerSession {
  id            String        @id @default(cuid())
  customerName  String?
  customerPhone String?
  customerEmail String?
  partySize     Int           @default(1)
  status        SessionStatus @default(WAITING)
  tableId       String?
  userId        String
  waiterId      String?
  checkInTime   DateTime      @default(now())
  seatedTime    DateTime?
  checkOutTime  DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  table         Table?        @relation(fields: [tableId], references: [id])
  user          User          @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
  waiter        User?         @relation("WaiterSessions", fields: [waiterId], references: [id])
  orders        Order[]
  payments      Payment[]
}

model Order {
  id             String           @id @default(cuid())
  orderNumber    String
  subOrderNumber String?
  mainOrderId    String?
  status         OrderStatus      @default(PENDING)
  totalAmount    Decimal          @db.Decimal(10, 2)
  customerName   String?
  customerPhone  String?
  customerEmail  String?
  notes          String?
  tableId        String?
  sessionId      String?
  userId         String
  waiterId       String?
  cookId         String?
  servedBy       String?
  orderedAt      DateTime         @default(now())
  preparingAt    DateTime?
  readyAt        DateTime?
  servedAt       DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  cook           User?            @relation("OrderCook", fields: [cookId], references: [id])
  mainOrder      Order?           @relation("MainSubOrders", fields: [mainOrderId], references: [id])
  subOrders      Order[]          @relation("MainSubOrders")
  server         User?            @relation("OrderServer", fields: [servedBy], references: [id])
  session        CustomerSession? @relation(fields: [sessionId], references: [id])
  table          Table?           @relation(fields: [tableId], references: [id])
  user           User             @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  waiter         User?            @relation("OrderWaiter", fields: [waiterId], references: [id])
  items          OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  notes      String?
  selections Json?
  orderId    String
  menuItemId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Payment {
  id                 String          @id @default(cuid())
  paymentNumber      String
  sessionId          String
  userId             String
  customerName       String?
  customerPhone      String?
  customerEmail      String?
  partySize          Int
  tableNumber        String
  tableName          String?
  checkInTime        DateTime
  checkOutTime       DateTime
  restaurantName     String
  restaurantAddress  String?
  restaurantPhone    String?
  paymentMethod      PaymentMethod   @default(CASH)
  subtotalAmount     Decimal         @db.Decimal(10, 2)
  discountAmount     Decimal         @default(0) @db.Decimal(10, 2)
  extraChargesAmount Decimal         @default(0) @db.Decimal(10, 2)
  finalAmount        Decimal         @db.Decimal(10, 2)
  receivedAmount     Decimal?        @db.Decimal(10, 2)
  changeAmount       Decimal?        @db.Decimal(10, 2)
  notes              String?
  extraCharges       Json?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  session            CustomerSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items              PaymentItem[]

  @@unique([userId, paymentNumber])
}

model PaymentItem {
  id                  String   @id @default(cuid())
  paymentId           String
  menuItemName        String
  menuItemDescription String?
  menuItemPrice       Decimal  @db.Decimal(10, 2)
  categoryName        String
  quantity            Int
  unitPrice           Decimal  @db.Decimal(10, 2)
  totalPrice          Decimal  @db.Decimal(10, 2)
  notes               String?
  selections          Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  payment             Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model RestaurantSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  allowOnlineOrdering Boolean  @default(true)
  acceptCashPayments  Boolean  @default(true)
  acceptCardPayments  Boolean  @default(false)
  deliveryEnabled     Boolean  @default(false)
  pickupEnabled       Boolean  @default(true)
  minimumOrderAmount  Decimal? @db.Decimal(10, 2)
  deliveryFee         Decimal? @db.Decimal(10, 2)
  estimatedPrepTime   Int      @default(30)
  operatingHours      Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SessionStatus {
  WAITING
  SEATED
  ORDERING
  ORDERED
  SERVING
  DINING
  BILLING
  COMPLETED
  CANCELLED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  SERVING
  DELIVERED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  QR
  CREDIT_CARD
  DEBIT_CARD
}
